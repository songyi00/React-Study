[{"/Users/ksl2950/my-app/client/src/index.js":"1","/Users/ksl2950/my-app/client/src/App.js":"2","/Users/ksl2950/my-app/client/src/reportWebVitals.js":"3","/Users/ksl2950/my-app/client/src/components/Customer.js":"4","/Users/ksl2950/my-app/client/src/components/CustomerAdd.js":"5","/Users/ksl2950/my-app/client/src/components/customerDelete.js":"6"},{"size":500,"mtime":1614147652568,"results":"7","hashOfConfig":"8"},{"size":3601,"mtime":1614148071700,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1610456248926,"results":"10","hashOfConfig":"8"},{"size":854,"mtime":1614146902053,"results":"11","hashOfConfig":"8"},{"size":2750,"mtime":1612958188679,"results":"12","hashOfConfig":"8"},{"size":426,"mtime":1614146530405,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1w7dkxr",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/ksl2950/my-app/client/src/index.js",[],["29","30"],"/Users/ksl2950/my-app/client/src/App.js",["31"],"import React, { Component } from 'react';\nimport Customer from './components/Customer'\nimport CustomerAdd from './components/CustomerAdd'\nimport './App.css';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell'; \nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Tab } from '@material-ui/core';\n\n/*\n 리액트 컴포넌트 실행 순서 (life cycle)\n 1) constructor()\n 2) componentWillMount()\n 3) render() \n 4) componentDidMount()\n\n props or state 변경? => shouleComponentUpdate() \n*/\n\nconst styles = theme => ({\n  root: {\n    width : '100%',\n    marginTop : theme.spacing.unit * 3,\n    overflowX: \"auto\"\n  },\n  table: {\n    minWidth: 1080 //테이블 가로 크기를 화면 크기와 상관없이 1080으로 고정시킴 \n  },\n  progress : {\n    margin : theme.spacing.unit * 2 \n  }\n})\n\nclass App extends Component {\n  //props는 변경될 수 없는 데이터를 명시할 때, state는 변경될 수 있는 데이터를 명시할 때 사용  \n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      customers: '',\n      completed: 0\n    }\n  }\n  \n  stateRefresh = () => {\n    this.setState({\n      customers: '',\n      completed: 0\n    });\n    this.callApi()\n        .then(res => this.setState({customers : res}))\n        .catch(err => console.log(err));\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(this.progress, 20); //0.02초마다 progress 함수 실행 \n    this.callApi() // body -> res \n      .then(res => this.setState({customers : res}))\n      .catch(err => console.log(err));\n  }\n\n  callApi = async () => {\n    const response = await fetch('/api/customers');\n    const body = await response.json(); //위의 경로(서버)에서 값을 가져와서 json 형태로 바꿔준다. \n    return body;\n  }\n  //로딩화면 구현 \n  progress = () => {\n    const { completed } = this.state;\n    this.setState({completed: completed >=100 ? 0 : completed + 1});\n  }\n  render(){\n    const { classes } = this.props;\n    return(\n      <div>\n      <Paper className={classes.root}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell>번호</TableCell>\n              <TableCell>이미지</TableCell>\n              <TableCell>이름</TableCell>\n              <TableCell>생년월일</TableCell>\n              <TableCell>성별</TableCell>\n              <TableCell>직업</TableCell>\n              <TableCell>설정</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n          { this.state.customers ? this.state.customers.map(c => {\n              return (<Customer stateRefresh = {this.stateRefresh} key = {c.id} id = {c.id} image = {c.image} name = {c.name} birthday = {c.birthday} gender = {c.gender} job = {c.job} />)\n                }) : \n                <TableRow>\n                  <TableCell colSpan=\"6\" align=\"center\">\n                    <CircularProgress className={classes.progress} variant=\"determinate\" value={this.state.completed}/>\n                  </TableCell>\n                </TableRow>}\n          </TableBody>\n        </Table>\n      </Paper>\n      <CustomerAdd stateRefresh={this.stateRefresh}/> \n      </div>\n    );\n  }\n}\n// CustomerAdd에 함수 자체(stateRefresh)를 props형태로 넘김 \n \nexport default withStyles(styles)(App);\n","/Users/ksl2950/my-app/client/src/reportWebVitals.js",[],"/Users/ksl2950/my-app/client/src/components/Customer.js",[],"/Users/ksl2950/my-app/client/src/components/CustomerAdd.js",[],"/Users/ksl2950/my-app/client/src/components/customerDelete.js",[],["32","33"],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":13,"column":10,"nodeType":"40","messageId":"41","endLine":13,"endColumn":13},{"ruleId":"34","replacedBy":"42"},{"ruleId":"36","replacedBy":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'Tab' is defined but never used.","Identifier","unusedVar",["44"],["45"],"no-global-assign","no-unsafe-negation"]